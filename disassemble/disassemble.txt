
kmalloc_mapping.ko:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <test_fun2>:
   0:	e8 00 00 00 00       	callq  5 <test_fun2+0x5>
			1: R_X86_64_PLT32	__fentry__-0x4
   5:	55                   	push   %rbp
   6:	48 89 e5             	mov    %rsp,%rbp
   9:	48 83 ec 08          	sub    $0x8,%rsp
   d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  14:	85 ff                	test   %edi,%edi
  16:	7e 15                	jle    2d <test_fun2+0x2d>
  18:	8d 04 3f             	lea    (%rdi,%rdi,1),%eax
  1b:	c1 e7 02             	shl    $0x2,%edi
  1e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  21:	01 c2                	add    %eax,%edx
  23:	83 c0 02             	add    $0x2,%eax
  26:	89 55 fc             	mov    %edx,-0x4(%rbp)
  29:	39 f8                	cmp    %edi,%eax
  2b:	75 f1                	jne    1e <test_fun2+0x1e>
  2d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  30:	c9                   	leaveq 
  31:	e9 00 00 00 00       	jmpq   36 <test_fun2+0x36>
			32: R_X86_64_PLT32	__x86_return_thunk-0x4
  36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  3d:	00 00 00 

0000000000000040 <test_fun3>:
  40:	e8 00 00 00 00       	callq  45 <test_fun3+0x5>
			41: R_X86_64_PLT32	__fentry__-0x4
  45:	55                   	push   %rbp
  46:	48 89 e5             	mov    %rsp,%rbp
  49:	48 83 ec 08          	sub    $0x8,%rsp
  4d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  54:	85 ff                	test   %edi,%edi
  56:	7e 18                	jle    70 <test_fun3+0x30>
  58:	31 c0                	xor    %eax,%eax
  5a:	89 c2                	mov    %eax,%edx
  5c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  5f:	0f af d0             	imul   %eax,%edx
  62:	83 c0 01             	add    $0x1,%eax
  65:	01 f9                	add    %edi,%ecx
  67:	01 ca                	add    %ecx,%edx
  69:	89 55 fc             	mov    %edx,-0x4(%rbp)
  6c:	39 c7                	cmp    %eax,%edi
  6e:	75 ea                	jne    5a <test_fun3+0x1a>
  70:	8b 45 fc             	mov    -0x4(%rbp),%eax
  73:	c9                   	leaveq 
  74:	e9 00 00 00 00       	jmpq   79 <test_fun3+0x39>
			75: R_X86_64_PLT32	__x86_return_thunk-0x4
  79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000080 <test_fun>:
  80:	e8 00 00 00 00       	callq  85 <test_fun+0x5>
			81: R_X86_64_PLT32	__fentry__-0x4
  85:	55                   	push   %rbp
  86:	48 89 e5             	mov    %rsp,%rbp
  89:	41 54                	push   %r12
  8b:	41 89 fc             	mov    %edi,%r12d
  8e:	53                   	push   %rbx
  8f:	e8 6c ff ff ff       	callq  0 <test_fun2>
  94:	41 8d 7c 24 01       	lea    0x1(%r12),%edi
  99:	89 c3                	mov    %eax,%ebx
  9b:	e8 a0 ff ff ff       	callq  40 <test_fun3>
  a0:	89 da                	mov    %ebx,%edx
  a2:	44 89 e7             	mov    %r12d,%edi
  a5:	89 c6                	mov    %eax,%esi
  a7:	29 c2                	sub    %eax,%edx
  a9:	29 de                	sub    %ebx,%esi
  ab:	39 c3                	cmp    %eax,%ebx
  ad:	0f 4f f2             	cmovg  %edx,%esi
  b0:	e8 00 00 00 00       	callq  b5 <test_fun+0x35>
			b1: R_X86_64_PLT32	extern_test_fun-0x4
  b5:	5b                   	pop    %rbx
  b6:	41 5c                	pop    %r12
  b8:	5d                   	pop    %rbp
  b9:	e9 00 00 00 00       	jmpq   be <test_fun+0x3e>
			ba: R_X86_64_PLT32	__x86_return_thunk-0x4
  be:	66 90                	xchg   %ax,%ax

00000000000000c0 <pmd_huge>:
  c0:	e8 00 00 00 00       	callq  c5 <pmd_huge+0x5>
			c1: R_X86_64_PLT32	__fentry__-0x4
  c5:	48 f7 c7 9f ff ff ff 	test   $0xffffffffffffff9f,%rdi
  cc:	75 07                	jne    d5 <pmd_huge+0x15>
  ce:	31 c0                	xor    %eax,%eax
  d0:	e9 00 00 00 00       	jmpq   d5 <pmd_huge+0x15>
			d1: R_X86_64_PLT32	__x86_return_thunk-0x4
  d5:	55                   	push   %rbp
  d6:	48 89 e5             	mov    %rsp,%rbp
  d9:	ff 14 25 00 00 00 00 	callq  *0x0
			dc: R_X86_64_32S	pv_ops+0x210
  e0:	25 81 00 00 00       	and    $0x81,%eax
  e5:	5d                   	pop    %rbp
  e6:	48 83 f8 01          	cmp    $0x1,%rax
  ea:	0f 95 c0             	setne  %al
  ed:	0f b6 c0             	movzbl %al,%eax
  f0:	e9 00 00 00 00       	jmpq   f5 <pmd_huge+0x35>
			f1: R_X86_64_PLT32	__x86_return_thunk-0x4

Disassembly of section .altinstr_replacement:

0000000000000000 <.altinstr_replacement>:
   0:	48 89 f8             	mov    %rdi,%rax
   3:	48 ba 00 f0 ff ff ff 	movabs $0xfffffffffff000,%rdx
   a:	ff ff 00 

Disassembly of section .text.unlikely:

0000000000000000 <copy_fun>:
   0:	e8 00 00 00 00       	callq  5 <copy_fun+0x5>
			1: R_X86_64_PLT32	__fentry__-0x4
   5:	55                   	push   %rbp
   6:	48 81 c2 ff 0f 00 00 	add    $0xfff,%rdx
   d:	49 89 c8             	mov    %rcx,%r8
  10:	48 89 d1             	mov    %rdx,%rcx
  13:	48 c1 e9 0c          	shr    $0xc,%rcx
  17:	48 89 e5             	mov    %rsp,%rbp
  1a:	41 56                	push   %r14
  1c:	49 89 d6             	mov    %rdx,%r14
  1f:	48 89 fa             	mov    %rdi,%rdx
  22:	41 55                	push   %r13
  24:	49 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%r14
  2b:	49 89 f5             	mov    %rsi,%r13
  2e:	41 54                	push   %r12
  30:	49 89 fc             	mov    %rdi,%r12
  33:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			36: R_X86_64_32S	.rodata.str1.8
  3a:	e8 00 00 00 00       	callq  3f <copy_fun+0x3f>
			3b: R_X86_64_PLT32	_printk-0x4
  3f:	48 ba 00 f0 ff ff ff 	movabs $0x7ffffffff000,%rdx
  46:	7f 00 00 
  49:	4c 89 e0             	mov    %r12,%rax
  4c:	4c 01 f0             	add    %r14,%rax
  4f:	72 05                	jb     56 <copy_fun+0x56>
  51:	48 39 c2             	cmp    %rax,%rdx
  54:	73 0e                	jae    64 <copy_fun+0x64>
  56:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			59: R_X86_64_32S	.rodata.str1.1
  5d:	e8 00 00 00 00       	callq  62 <copy_fun+0x62>
			5e: R_X86_64_PLT32	_printk-0x4
  62:	eb 3c                	jmp    a0 <copy_fun+0xa0>
  64:	49 81 fe ff ff ff 7f 	cmp    $0x7fffffff,%r14
  6b:	76 04                	jbe    71 <copy_fun+0x71>
  6d:	0f 0b                	ud2    
  6f:	eb 23                	jmp    94 <copy_fun+0x94>
  71:	ba 01 00 00 00       	mov    $0x1,%edx
  76:	4c 89 f6             	mov    %r14,%rsi
  79:	4c 89 ef             	mov    %r13,%rdi
  7c:	e8 00 00 00 00       	callq  81 <copy_fun+0x81>
			7d: R_X86_64_PLT32	__check_object_size-0x4
  81:	4c 89 f2             	mov    %r14,%rdx
  84:	4c 89 ee             	mov    %r13,%rsi
  87:	4c 89 e7             	mov    %r12,%rdi
  8a:	e8 00 00 00 00       	callq  8f <copy_fun+0x8f>
			8b: R_X86_64_PLT32	_copy_to_user-0x4
  8f:	48 85 c0             	test   %rax,%rax
  92:	74 0c                	je     a0 <copy_fun+0xa0>
  94:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			97: R_X86_64_32S	.rodata.str1.1+0x38
  9b:	e8 00 00 00 00       	callq  a0 <copy_fun+0xa0>
			9c: R_X86_64_PLT32	_printk-0x4
  a0:	41 5c                	pop    %r12
  a2:	41 5d                	pop    %r13
  a4:	41 5e                	pop    %r14
  a6:	5d                   	pop    %rbp
  a7:	e9 00 00 00 00       	jmpq   ac <send_to_user>
			a8: R_X86_64_PLT32	__x86_return_thunk-0x4

00000000000000ac <send_to_user>:
  ac:	e8 00 00 00 00       	callq  b1 <send_to_user+0x5>
			ad: R_X86_64_PLT32	__fentry__-0x4
  b1:	55                   	push   %rbp
  b2:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			b5: R_X86_64_32S	.rodata+0x10
  b9:	48 89 e5             	mov    %rsp,%rbp
  bc:	41 54                	push   %r12
  be:	41 89 fc             	mov    %edi,%r12d
  c1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			c4: R_X86_64_32S	.rodata.str1.1+0x4e
  c8:	53                   	push   %rbx
  c9:	e8 00 00 00 00       	callq  ce <send_to_user+0x22>
			ca: R_X86_64_PLT32	_printk-0x4
  ce:	83 c9 ff             	or     $0xffffffff,%ecx
  d1:	31 d2                	xor    %edx,%edx
  d3:	be 20 0a 00 00       	mov    $0xa20,%esi
  d8:	bf 14 00 00 00       	mov    $0x14,%edi
  dd:	e8 00 00 00 00       	callq  e2 <send_to_user+0x36>
			de: R_X86_64_PLT32	__alloc_skb-0x4
  e2:	48 89 c3             	mov    %rax,%rbx
  e5:	83 c8 ff             	or     $0xffffffff,%eax
  e8:	48 85 db             	test   %rbx,%rbx
  eb:	74 5c                	je     149 <send_to_user+0x9d>
  ed:	83 7b 74 00          	cmpl   $0x0,0x74(%rbx)
  f1:	74 0f                	je     102 <send_to_user+0x56>
  f3:	31 f6                	xor    %esi,%esi
  f5:	48 89 df             	mov    %rbx,%rdi
  f8:	e8 00 00 00 00       	callq  fd <send_to_user+0x51>
			f9: R_X86_64_PLT32	kfree_skb_reason-0x4
  fd:	83 c8 ff             	or     $0xffffffff,%eax
 100:	eb 47                	jmp    149 <send_to_user+0x9d>
 102:	8b 83 bc 00 00 00    	mov    0xbc(%rbx),%eax
 108:	2b 83 b8 00 00 00    	sub    0xb8(%rbx),%eax
 10e:	83 f8 13             	cmp    $0x13,%eax
 111:	7e e0                	jle    f3 <send_to_user+0x47>
 113:	45 31 c9             	xor    %r9d,%r9d
 116:	31 d2                	xor    %edx,%edx
 118:	31 f6                	xor    %esi,%esi
 11a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 120:	b9 11 00 00 00       	mov    $0x11,%ecx
 125:	48 89 df             	mov    %rbx,%rdi
 128:	e8 00 00 00 00       	callq  12d <send_to_user+0x81>
			129: R_X86_64_PLT32	__nlmsg_put-0x4
 12d:	48 85 c0             	test   %rax,%rax
 130:	74 c1                	je     f3 <send_to_user+0x47>
 132:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 139 <send_to_user+0x8d>
			135: R_X86_64_PC32	.bss+0x4
 139:	b9 40 00 00 00       	mov    $0x40,%ecx
 13e:	44 89 e2             	mov    %r12d,%edx
 141:	48 89 de             	mov    %rbx,%rsi
 144:	e8 00 00 00 00       	callq  149 <send_to_user+0x9d>
			145: R_X86_64_PLT32	netlink_unicast-0x4
 149:	5b                   	pop    %rbx
 14a:	41 5c                	pop    %r12
 14c:	5d                   	pop    %rbp
 14d:	e9 00 00 00 00       	jmpq   152 <netlink_rcv_msg>
			14e: R_X86_64_PLT32	__x86_return_thunk-0x4

0000000000000152 <netlink_rcv_msg>:
 152:	e8 00 00 00 00       	callq  157 <netlink_rcv_msg+0x5>
			153: R_X86_64_PLT32	__fentry__-0x4
 157:	55                   	push   %rbp
 158:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			15b: R_X86_64_32S	.rodata
 15f:	48 89 e5             	mov    %rsp,%rbp
 162:	41 54                	push   %r12
 164:	49 89 fc             	mov    %rdi,%r12
 167:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			16a: R_X86_64_32S	.rodata.str1.1+0x4e
 16e:	53                   	push   %rbx
 16f:	e8 00 00 00 00       	callq  174 <netlink_rcv_msg+0x22>
			170: R_X86_64_PLT32	_printk-0x4
 174:	41 8b 54 24 70       	mov    0x70(%r12),%edx
 179:	49 8b 84 24 c8 00 00 	mov    0xc8(%r12),%rax
 180:	00 
 181:	83 fa 0f             	cmp    $0xf,%edx
 184:	76 1c                	jbe    1a2 <netlink_rcv_msg+0x50>
 186:	48 89 c3             	mov    %rax,%rbx
 189:	48 83 c3 10          	add    $0x10,%rbx
 18d:	74 26                	je     1b5 <netlink_rcv_msg+0x63>
 18f:	8b 78 0c             	mov    0xc(%rax),%edi
 192:	48 89 de             	mov    %rbx,%rsi
 195:	89 3d 00 00 00 00    	mov    %edi,0x0(%rip)        # 19b <netlink_rcv_msg+0x49>
			197: R_X86_64_PC32	user_process-0x4
 19b:	e8 00 00 00 00       	callq  1a0 <netlink_rcv_msg+0x4e>
			19c: R_X86_64_PLT32	send_to_user-0x4
 1a0:	eb 13                	jmp    1b5 <netlink_rcv_msg+0x63>
 1a2:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			1a5: R_X86_64_32S	.rodata
 1a9:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1ac: R_X86_64_32S	.rodata.str1.1+0x54
 1b0:	e8 00 00 00 00       	callq  1b5 <netlink_rcv_msg+0x63>
			1b1: R_X86_64_PLT32	_printk-0x4
 1b5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1b8: R_X86_64_32S	.text+0x80
 1bc:	e8 00 00 00 00       	callq  1c1 <netlink_rcv_msg+0x6f>
			1bd: R_X86_64_PLT32	vmalloc_to_pfn-0x4
 1c1:	ba 00 00 00 80       	mov    $0x80000000,%edx
 1c6:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1cd <netlink_rcv_msg+0x7b>
			1c9: R_X86_64_PC32	phys_base-0x4
 1cd:	48 89 c1             	mov    %rax,%rcx
 1d0:	48 81 c2 00 00 00 00 	add    $0x0,%rdx
			1d3: R_X86_64_32S	.text+0x80
 1d7:	72 0e                	jb     1e7 <netlink_rcv_msg+0x95>
 1d9:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
 1e0:	48 2b 35 00 00 00 00 	sub    0x0(%rip),%rsi        # 1e7 <netlink_rcv_msg+0x95>
			1e3: R_X86_64_PC32	page_offset_base-0x4
 1e7:	48 01 f2             	add    %rsi,%rdx
 1ea:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1ed: R_X86_64_32S	.rodata.str1.8+0x30
 1f1:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			1f4: R_X86_64_32S	.text+0x80
 1f8:	e8 00 00 00 00       	callq  1fd <netlink_rcv_msg+0xab>
			1f9: R_X86_64_PLT32	_printk-0x4
 1fd:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			200: R_X86_64_32S	.text+0x80
 204:	e8 00 00 00 00       	callq  209 <netlink_rcv_msg+0xb7>
			205: R_X86_64_PLT32	vmalloc_to_pfn-0x4
 209:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			20c: R_X86_64_32S	.rodata.str1.1+0x6e
 210:	48 89 c6             	mov    %rax,%rsi
 213:	e8 00 00 00 00       	callq  218 <netlink_rcv_msg+0xc6>
			214: R_X86_64_PLT32	_printk-0x4
 218:	48 8b 3b             	mov    (%rbx),%rdi
 21b:	31 c9                	xor    %ecx,%ecx
 21d:	ba 64 00 00 00       	mov    $0x64,%edx
 222:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			225: R_X86_64_32S	.text+0x80
 229:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
 230:	e8 00 00 00 00       	callq  235 <netlink_rcv_msg+0xe3>
			231: R_X86_64_PLT32	copy_fun-0x4
 235:	5b                   	pop    %rbx
 236:	41 5c                	pop    %r12
 238:	5d                   	pop    %rbp
 239:	e9 00 00 00 00       	jmpq   23e <netlink_rcv_msg+0xec>
			23a: R_X86_64_PLT32	__x86_return_thunk-0x4

Disassembly of section .init.text:

0000000000000000 <init_module>:
   0:	e8 00 00 00 00       	callq  5 <init_module+0x5>
			1: R_X86_64_PLT32	__fentry__-0x4
   5:	55                   	push   %rbp
   6:	31 f6                	xor    %esi,%esi
   8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			b: R_X86_64_32S	.rodata.str1.1+0x7a
   f:	48 89 e5             	mov    %rsp,%rbp
  12:	e8 00 00 00 00       	callq  17 <init_module+0x17>
			13: R_X86_64_PLT32	_printk-0x4
  17:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
			1a: R_X86_64_32S	cfg
  1e:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
			21: R_X86_64_32S	__this_module
  25:	be 11 00 00 00       	mov    $0x11,%esi
  2a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			2d: R_X86_64_32S	init_net
  31:	e8 00 00 00 00       	callq  36 <init_module+0x36>
			32: R_X86_64_PLT32	__netlink_kernel_create-0x4
  36:	45 31 c0             	xor    %r8d,%r8d
  39:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 40 <init_module+0x40>
			3c: R_X86_64_PC32	.bss+0x4
  40:	48 85 c0             	test   %rax,%rax
  43:	75 10                	jne    55 <init_module+0x55>
  45:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			48: R_X86_64_32S	.rodata.str1.8+0x78
  4c:	e8 00 00 00 00       	callq  51 <init_module+0x51>
			4d: R_X86_64_PLT32	_printk-0x4
  51:	41 83 c8 ff          	or     $0xffffffff,%r8d
  55:	44 89 c0             	mov    %r8d,%eax
  58:	5d                   	pop    %rbp
  59:	e9 00 00 00 00       	jmpq   5e <__UNIQUE_ID_name121+0x12>
			5a: R_X86_64_PLT32	__x86_return_thunk-0x4

Disassembly of section .exit.text:

0000000000000000 <cleanup_module>:
   0:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 7 <cleanup_module+0x7>
			3: R_X86_64_PC32	.bss+0x4
   7:	48 85 ff             	test   %rdi,%rdi
   a:	74 1a                	je     26 <cleanup_module+0x26>
   c:	55                   	push   %rbp
   d:	48 89 e5             	mov    %rsp,%rbp
  10:	e8 00 00 00 00       	callq  15 <cleanup_module+0x15>
			11: R_X86_64_PLT32	netlink_kernel_release-0x4
  15:	5d                   	pop    %rbp
  16:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 21 <cleanup_module+0x21>
  1d:	00 00 00 00 
			19: R_X86_64_PC32	.bss
  21:	e9 00 00 00 00       	jmpq   26 <cleanup_module+0x26>
			22: R_X86_64_PLT32	__x86_return_thunk-0x4
  26:	e9 00 00 00 00       	jmpq   2b <.LC2+0xf>
			27: R_X86_64_PLT32	__x86_return_thunk-0x4
