
kmalloc_mapping.ko:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <test_fun>:
   0:	e8 00 00 00 00       	callq  5 <test_fun+0x5>
			1: R_X86_64_PLT32	__fentry__-0x4
   5:	55                   	push   %rbp
   6:	45 31 c0             	xor    %r8d,%r8d
   9:	48 89 e5             	mov    %rsp,%rbp
   c:	85 ff                	test   %edi,%edi
   e:	7e 0c                	jle    1c <test_fun+0x1c>
  10:	31 c0                	xor    %eax,%eax
  12:	41 01 c0             	add    %eax,%r8d
  15:	83 c0 01             	add    $0x1,%eax
  18:	39 c7                	cmp    %eax,%edi
  1a:	75 f6                	jne    12 <test_fun+0x12>
  1c:	44 89 c0             	mov    %r8d,%eax
  1f:	5d                   	pop    %rbp
  20:	e9 00 00 00 00       	jmpq   25 <test_fun+0x25>
			21: R_X86_64_PLT32	__x86_return_thunk-0x4
  25:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  2c:	00 00 00 00 

0000000000000030 <pmd_huge>:
  30:	e8 00 00 00 00       	callq  35 <pmd_huge+0x5>
			31: R_X86_64_PLT32	__fentry__-0x4
  35:	48 f7 c7 9f ff ff ff 	test   $0xffffffffffffff9f,%rdi
  3c:	75 07                	jne    45 <pmd_huge+0x15>
  3e:	31 c0                	xor    %eax,%eax
  40:	e9 00 00 00 00       	jmpq   45 <pmd_huge+0x15>
			41: R_X86_64_PLT32	__x86_return_thunk-0x4
  45:	55                   	push   %rbp
  46:	48 89 e5             	mov    %rsp,%rbp
  49:	ff 14 25 00 00 00 00 	callq  *0x0
			4c: R_X86_64_32S	pv_ops+0x210
  50:	25 81 00 00 00       	and    $0x81,%eax
  55:	5d                   	pop    %rbp
  56:	48 83 f8 01          	cmp    $0x1,%rax
  5a:	0f 95 c0             	setne  %al
  5d:	0f b6 c0             	movzbl %al,%eax
  60:	e9 00 00 00 00       	jmpq   65 <pmd_huge+0x35>
			61: R_X86_64_PLT32	__x86_return_thunk-0x4
  65:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  6c:	00 00 00 00 

0000000000000070 <copy_fun>:
  70:	e8 00 00 00 00       	callq  75 <copy_fun+0x5>
			71: R_X86_64_PLT32	__fentry__-0x4
  75:	55                   	push   %rbp
  76:	48 8d 82 ff 0f 00 00 	lea    0xfff(%rdx),%rax
  7d:	49 89 c8             	mov    %rcx,%r8
  80:	48 89 fa             	mov    %rdi,%rdx
  83:	48 89 e5             	mov    %rsp,%rbp
  86:	41 55                	push   %r13
  88:	49 89 c5             	mov    %rax,%r13
  8b:	48 c1 e8 0c          	shr    $0xc,%rax
  8f:	41 54                	push   %r12
  91:	48 89 c1             	mov    %rax,%rcx
  94:	49 89 f4             	mov    %rsi,%r12
  97:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
  9e:	53                   	push   %rbx
  9f:	48 89 fb             	mov    %rdi,%rbx
  a2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			a5: R_X86_64_32S	.rodata.str1.8
  a9:	e8 00 00 00 00       	callq  ae <copy_fun+0x3e>
			aa: R_X86_64_PLT32	_printk-0x4
  ae:	48 ba 00 f0 ff ff ff 	movabs $0x7ffffffff000,%rdx
  b5:	7f 00 00 
  b8:	48 89 d8             	mov    %rbx,%rax
  bb:	4c 01 e8             	add    %r13,%rax
  be:	0f 82 00 00 00 00    	jb     c4 <copy_fun+0x54>
			c0: R_X86_64_PC32	.text.unlikely-0x4
  c4:	48 39 c2             	cmp    %rax,%rdx
  c7:	0f 83 00 00 00 00    	jae    cd <copy_fun+0x5d>
			c9: R_X86_64_PC32	.text.unlikely+0x13
  cd:	e9 00 00 00 00       	jmpq   d2 <send_to_user+0x16>
			ce: R_X86_64_PC32	.text.unlikely-0x4

Disassembly of section .altinstr_replacement:

0000000000000000 <.altinstr_replacement>:
   0:	48 89 f8             	mov    %rdi,%rax
   3:	48 ba 00 f0 ff ff ff 	movabs $0xfffffffffff000,%rdx
   a:	ff ff 00 

Disassembly of section .text.unlikely:

0000000000000000 <copy_fun.cold>:
   0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			3: R_X86_64_32S	.rodata.str1.1
   7:	e8 00 00 00 00       	callq  c <copy_fun.cold+0xc>
			8: R_X86_64_PLT32	_printk-0x4
   c:	5b                   	pop    %rbx
   d:	41 5c                	pop    %r12
   f:	41 5d                	pop    %r13
  11:	5d                   	pop    %rbp
  12:	e9 00 00 00 00       	jmpq   17 <copy_fun.cold+0x17>
			13: R_X86_64_PLT32	__x86_return_thunk-0x4
  17:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
  1e:	76 10                	jbe    30 <copy_fun.cold+0x30>
  20:	0f 0b                	ud2    
  22:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			25: R_X86_64_32S	.rodata.str1.1+0x38
  29:	e8 00 00 00 00       	callq  2e <copy_fun.cold+0x2e>
			2a: R_X86_64_PLT32	_printk-0x4
  2e:	eb dc                	jmp    c <copy_fun.cold+0xc>
  30:	ba 01 00 00 00       	mov    $0x1,%edx
  35:	4c 89 ee             	mov    %r13,%rsi
  38:	4c 89 e7             	mov    %r12,%rdi
  3b:	e8 00 00 00 00       	callq  40 <copy_fun.cold+0x40>
			3c: R_X86_64_PLT32	__check_object_size-0x4
  40:	4c 89 ea             	mov    %r13,%rdx
  43:	4c 89 e6             	mov    %r12,%rsi
  46:	48 89 df             	mov    %rbx,%rdi
  49:	e8 00 00 00 00       	callq  4e <copy_fun.cold+0x4e>
			4a: R_X86_64_PLT32	_copy_to_user-0x4
  4e:	48 85 c0             	test   %rax,%rax
  51:	75 cf                	jne    22 <copy_fun.cold+0x22>
  53:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 5a <copy_fun.cold+0x5a>
			56: R_X86_64_PC32	kmalloc_caches+0x14
  5a:	be c0 0c 00 00       	mov    $0xcc0,%esi
  5f:	ba 08 00 00 00       	mov    $0x8,%edx
  64:	e8 00 00 00 00       	callq  69 <copy_fun.cold+0x69>
			65: R_X86_64_PLT32	kmem_cache_alloc_trace-0x4
  69:	48 89 c6             	mov    %rax,%rsi
  6c:	48 85 c0             	test   %rax,%rax
  6f:	74 9b                	je     c <copy_fun.cold+0xc>
  71:	c6 00 c3             	movb   $0xc3,(%rax)
  74:	b8 01 00 00 00       	mov    $0x1,%eax
  79:	c6 04 06 90          	movb   $0x90,(%rsi,%rax,1)
  7d:	48 83 c0 01          	add    $0x1,%rax
  81:	48 83 f8 08          	cmp    $0x8,%rax
  85:	75 f2                	jne    79 <copy_fun.cold+0x79>
  87:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  8b:	ba 08 00 00 00       	mov    $0x8,%edx
  90:	e8 00 00 00 00       	callq  95 <copy_fun.cold+0x95>
			91: R_X86_64_PLT32	_copy_to_user-0x4
  95:	48 85 c0             	test   %rax,%rax
  98:	75 88                	jne    22 <copy_fun.cold+0x22>
  9a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			9d: R_X86_64_32S	.rodata.str1.1+0x4e
  a1:	e8 00 00 00 00       	callq  a6 <copy_fun.cold+0xa6>
			a2: R_X86_64_PLT32	_printk-0x4
  a6:	be 2d 00 00 00       	mov    $0x2d,%esi
  ab:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			ae: R_X86_64_32S	.rodata.str1.1+0x5c
  b2:	e8 00 00 00 00       	callq  b7 <copy_fun.cold+0xb7>
			b3: R_X86_64_PLT32	_printk-0x4
  b7:	e9 50 ff ff ff       	jmpq   c <copy_fun.cold+0xc>

00000000000000bc <send_to_user>:
  bc:	e8 00 00 00 00       	callq  c1 <send_to_user+0x5>
			bd: R_X86_64_PLT32	__fentry__-0x4
  c1:	55                   	push   %rbp
  c2:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			c5: R_X86_64_32S	.rodata+0x10
  c9:	48 89 e5             	mov    %rsp,%rbp
  cc:	41 54                	push   %r12
  ce:	41 89 fc             	mov    %edi,%r12d
  d1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			d4: R_X86_64_32S	.rodata.str1.1+0x62
  d8:	53                   	push   %rbx
  d9:	e8 00 00 00 00       	callq  de <send_to_user+0x22>
			da: R_X86_64_PLT32	_printk-0x4
  de:	83 c9 ff             	or     $0xffffffff,%ecx
  e1:	31 d2                	xor    %edx,%edx
  e3:	be 20 0a 00 00       	mov    $0xa20,%esi
  e8:	bf 14 00 00 00       	mov    $0x14,%edi
  ed:	e8 00 00 00 00       	callq  f2 <send_to_user+0x36>
			ee: R_X86_64_PLT32	__alloc_skb-0x4
  f2:	48 89 c3             	mov    %rax,%rbx
  f5:	83 c8 ff             	or     $0xffffffff,%eax
  f8:	48 85 db             	test   %rbx,%rbx
  fb:	74 5c                	je     159 <send_to_user+0x9d>
  fd:	83 7b 74 00          	cmpl   $0x0,0x74(%rbx)
 101:	74 0f                	je     112 <send_to_user+0x56>
 103:	31 f6                	xor    %esi,%esi
 105:	48 89 df             	mov    %rbx,%rdi
 108:	e8 00 00 00 00       	callq  10d <send_to_user+0x51>
			109: R_X86_64_PLT32	kfree_skb_reason-0x4
 10d:	83 c8 ff             	or     $0xffffffff,%eax
 110:	eb 47                	jmp    159 <send_to_user+0x9d>
 112:	8b 83 bc 00 00 00    	mov    0xbc(%rbx),%eax
 118:	2b 83 b8 00 00 00    	sub    0xb8(%rbx),%eax
 11e:	83 f8 13             	cmp    $0x13,%eax
 121:	7e e0                	jle    103 <send_to_user+0x47>
 123:	45 31 c9             	xor    %r9d,%r9d
 126:	31 d2                	xor    %edx,%edx
 128:	31 f6                	xor    %esi,%esi
 12a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 130:	b9 11 00 00 00       	mov    $0x11,%ecx
 135:	48 89 df             	mov    %rbx,%rdi
 138:	e8 00 00 00 00       	callq  13d <send_to_user+0x81>
			139: R_X86_64_PLT32	__nlmsg_put-0x4
 13d:	48 85 c0             	test   %rax,%rax
 140:	74 c1                	je     103 <send_to_user+0x47>
 142:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 149 <send_to_user+0x8d>
			145: R_X86_64_PC32	.bss+0x4
 149:	b9 40 00 00 00       	mov    $0x40,%ecx
 14e:	44 89 e2             	mov    %r12d,%edx
 151:	48 89 de             	mov    %rbx,%rsi
 154:	e8 00 00 00 00       	callq  159 <send_to_user+0x9d>
			155: R_X86_64_PLT32	netlink_unicast-0x4
 159:	5b                   	pop    %rbx
 15a:	41 5c                	pop    %r12
 15c:	5d                   	pop    %rbp
 15d:	e9 00 00 00 00       	jmpq   162 <netlink_rcv_msg>
			15e: R_X86_64_PLT32	__x86_return_thunk-0x4

0000000000000162 <netlink_rcv_msg>:
 162:	e8 00 00 00 00       	callq  167 <netlink_rcv_msg+0x5>
			163: R_X86_64_PLT32	__fentry__-0x4
 167:	55                   	push   %rbp
 168:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			16b: R_X86_64_32S	.rodata
 16f:	48 89 e5             	mov    %rsp,%rbp
 172:	41 54                	push   %r12
 174:	49 89 fc             	mov    %rdi,%r12
 177:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			17a: R_X86_64_32S	.rodata.str1.1+0x62
 17e:	53                   	push   %rbx
 17f:	e8 00 00 00 00       	callq  184 <netlink_rcv_msg+0x22>
			180: R_X86_64_PLT32	_printk-0x4
 184:	41 8b 54 24 70       	mov    0x70(%r12),%edx
 189:	49 8b 84 24 c8 00 00 	mov    0xc8(%r12),%rax
 190:	00 
 191:	83 fa 0f             	cmp    $0xf,%edx
 194:	76 1c                	jbe    1b2 <netlink_rcv_msg+0x50>
 196:	48 89 c3             	mov    %rax,%rbx
 199:	48 83 c3 10          	add    $0x10,%rbx
 19d:	74 26                	je     1c5 <netlink_rcv_msg+0x63>
 19f:	8b 78 0c             	mov    0xc(%rax),%edi
 1a2:	48 89 de             	mov    %rbx,%rsi
 1a5:	89 3d 00 00 00 00    	mov    %edi,0x0(%rip)        # 1ab <netlink_rcv_msg+0x49>
			1a7: R_X86_64_PC32	user_process-0x4
 1ab:	e8 00 00 00 00       	callq  1b0 <netlink_rcv_msg+0x4e>
			1ac: R_X86_64_PLT32	send_to_user-0x4
 1b0:	eb 13                	jmp    1c5 <netlink_rcv_msg+0x63>
 1b2:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			1b5: R_X86_64_32S	.rodata
 1b9:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1bc: R_X86_64_32S	.rodata.str1.1+0x68
 1c0:	e8 00 00 00 00       	callq  1c5 <netlink_rcv_msg+0x63>
			1c1: R_X86_64_PLT32	_printk-0x4
 1c5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1c8: R_X86_64_32S	test_fun
 1cc:	e8 00 00 00 00       	callq  1d1 <netlink_rcv_msg+0x6f>
			1cd: R_X86_64_PLT32	vmalloc_to_pfn-0x4
 1d1:	ba 00 00 00 80       	mov    $0x80000000,%edx
 1d6:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1dd <netlink_rcv_msg+0x7b>
			1d9: R_X86_64_PC32	phys_base-0x4
 1dd:	48 89 c1             	mov    %rax,%rcx
 1e0:	48 81 c2 00 00 00 00 	add    $0x0,%rdx
			1e3: R_X86_64_32S	test_fun
 1e7:	72 0e                	jb     1f7 <netlink_rcv_msg+0x95>
 1e9:	48 c7 c6 00 00 00 80 	mov    $0xffffffff80000000,%rsi
 1f0:	48 2b 35 00 00 00 00 	sub    0x0(%rip),%rsi        # 1f7 <netlink_rcv_msg+0x95>
			1f3: R_X86_64_PC32	page_offset_base-0x4
 1f7:	48 01 f2             	add    %rsi,%rdx
 1fa:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			1fd: R_X86_64_32S	.rodata.str1.8+0x30
 201:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			204: R_X86_64_32S	test_fun
 208:	e8 00 00 00 00       	callq  20d <netlink_rcv_msg+0xab>
			209: R_X86_64_PLT32	_printk-0x4
 20d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			210: R_X86_64_32S	test_fun
 214:	e8 00 00 00 00       	callq  219 <netlink_rcv_msg+0xb7>
			215: R_X86_64_PLT32	vmalloc_to_pfn-0x4
 219:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			21c: R_X86_64_32S	.rodata.str1.1+0x82
 220:	48 89 c6             	mov    %rax,%rsi
 223:	e8 00 00 00 00       	callq  228 <netlink_rcv_msg+0xc6>
			224: R_X86_64_PLT32	_printk-0x4
 228:	48 8b 3b             	mov    (%rbx),%rdi
 22b:	31 c9                	xor    %ecx,%ecx
 22d:	ba 64 00 00 00       	mov    $0x64,%edx
 232:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
			235: R_X86_64_32S	test_fun
 239:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
 240:	e8 00 00 00 00       	callq  245 <netlink_rcv_msg+0xe3>
			241: R_X86_64_PLT32	copy_fun-0x4
 245:	5b                   	pop    %rbx
 246:	41 5c                	pop    %r12
 248:	5d                   	pop    %rbp
 249:	e9 00 00 00 00       	jmpq   24e <netlink_rcv_msg+0xec>
			24a: R_X86_64_PLT32	__x86_return_thunk-0x4

Disassembly of section .init.text:

0000000000000000 <init_module>:
   0:	e8 00 00 00 00       	callq  5 <init_module+0x5>
			1: R_X86_64_PLT32	__fentry__-0x4
   5:	55                   	push   %rbp
   6:	31 f6                	xor    %esi,%esi
   8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			b: R_X86_64_32S	.rodata.str1.1+0x8e
   f:	48 89 e5             	mov    %rsp,%rbp
  12:	e8 00 00 00 00       	callq  17 <init_module+0x17>
			13: R_X86_64_PLT32	_printk-0x4
  17:	48 c7 c1 00 00 00 00 	mov    $0x0,%rcx
			1a: R_X86_64_32S	cfg
  1e:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
			21: R_X86_64_32S	__this_module
  25:	be 11 00 00 00       	mov    $0x11,%esi
  2a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			2d: R_X86_64_32S	init_net
  31:	e8 00 00 00 00       	callq  36 <init_module+0x36>
			32: R_X86_64_PLT32	__netlink_kernel_create-0x4
  36:	45 31 c0             	xor    %r8d,%r8d
  39:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 40 <init_module+0x40>
			3c: R_X86_64_PC32	.bss+0x4
  40:	48 85 c0             	test   %rax,%rax
  43:	75 10                	jne    55 <init_module+0x55>
  45:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
			48: R_X86_64_32S	.rodata.str1.8+0x78
  4c:	e8 00 00 00 00       	callq  51 <init_module+0x51>
			4d: R_X86_64_PLT32	_printk-0x4
  51:	41 83 c8 ff          	or     $0xffffffff,%r8d
  55:	44 89 c0             	mov    %r8d,%eax
  58:	5d                   	pop    %rbp
  59:	e9 00 00 00 00       	jmpq   5e <__UNIQUE_ID_vermagic120+0x5>
			5a: R_X86_64_PLT32	__x86_return_thunk-0x4

Disassembly of section .exit.text:

0000000000000000 <cleanup_module>:
   0:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 7 <cleanup_module+0x7>
			3: R_X86_64_PC32	.bss+0x4
   7:	48 85 ff             	test   %rdi,%rdi
   a:	74 1a                	je     26 <cleanup_module+0x26>
   c:	55                   	push   %rbp
   d:	48 89 e5             	mov    %rsp,%rbp
  10:	e8 00 00 00 00       	callq  15 <cleanup_module+0x15>
			11: R_X86_64_PLT32	netlink_kernel_release-0x4
  15:	5d                   	pop    %rbp
  16:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 21 <cleanup_module+0x21>
  1d:	00 00 00 00 
			19: R_X86_64_PC32	.bss
  21:	e9 00 00 00 00       	jmpq   26 <cleanup_module+0x26>
			22: R_X86_64_PLT32	__x86_return_thunk-0x4
  26:	e9 00 00 00 00       	jmpq   2b <.LC2+0xf>
			27: R_X86_64_PLT32	__x86_return_thunk-0x4
